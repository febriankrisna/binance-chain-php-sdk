<?php
/**
 * SubTx
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubTx Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubTx implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubTx';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'block_height' => 'int',
'from_addr' => 'string',
'to_addr' => 'string',
'tx_asset' => 'string',
'tx_fee' => 'string',
'tx_hash' => 'string',
'tx_type' => 'string',
'value' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'block_height' => 'int64',
'from_addr' => null,
'to_addr' => null,
'tx_asset' => null,
'tx_fee' => null,
'tx_hash' => null,
'tx_type' => null,
'value' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'block_height' => 'blockHeight',
'from_addr' => 'fromAddr',
'to_addr' => 'toAddr',
'tx_asset' => 'txAsset',
'tx_fee' => 'txFee',
'tx_hash' => 'txHash',
'tx_type' => 'txType',
'value' => 'value'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'block_height' => 'setBlockHeight',
'from_addr' => 'setFromAddr',
'to_addr' => 'setToAddr',
'tx_asset' => 'setTxAsset',
'tx_fee' => 'setTxFee',
'tx_hash' => 'setTxHash',
'tx_type' => 'setTxType',
'value' => 'setValue'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'block_height' => 'getBlockHeight',
'from_addr' => 'getFromAddr',
'to_addr' => 'getToAddr',
'tx_asset' => 'getTxAsset',
'tx_fee' => 'getTxFee',
'tx_hash' => 'getTxHash',
'tx_type' => 'getTxType',
'value' => 'getValue'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['block_height'] = isset($data['block_height']) ? $data['block_height'] : null;
        $this->container['from_addr'] = isset($data['from_addr']) ? $data['from_addr'] : null;
        $this->container['to_addr'] = isset($data['to_addr']) ? $data['to_addr'] : null;
        $this->container['tx_asset'] = isset($data['tx_asset']) ? $data['tx_asset'] : null;
        $this->container['tx_fee'] = isset($data['tx_fee']) ? $data['tx_fee'] : null;
        $this->container['tx_hash'] = isset($data['tx_hash']) ? $data['tx_hash'] : null;
        $this->container['tx_type'] = isset($data['tx_type']) ? $data['tx_type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets block_height
     *
     * @return int
     */
    public function getBlockHeight()
    {
        return $this->container['block_height'];
    }

    /**
     * Sets block_height
     *
     * @param int $block_height block_height
     *
     * @return $this
     */
    public function setBlockHeight($block_height)
    {
        $this->container['block_height'] = $block_height;

        return $this;
    }

    /**
     * Gets from_addr
     *
     * @return string
     */
    public function getFromAddr()
    {
        return $this->container['from_addr'];
    }

    /**
     * Sets from_addr
     *
     * @param string $from_addr from_addr
     *
     * @return $this
     */
    public function setFromAddr($from_addr)
    {
        $this->container['from_addr'] = $from_addr;

        return $this;
    }

    /**
     * Gets to_addr
     *
     * @return string
     */
    public function getToAddr()
    {
        return $this->container['to_addr'];
    }

    /**
     * Sets to_addr
     *
     * @param string $to_addr to_addr
     *
     * @return $this
     */
    public function setToAddr($to_addr)
    {
        $this->container['to_addr'] = $to_addr;

        return $this;
    }

    /**
     * Gets tx_asset
     *
     * @return string
     */
    public function getTxAsset()
    {
        return $this->container['tx_asset'];
    }

    /**
     * Sets tx_asset
     *
     * @param string $tx_asset tx_asset
     *
     * @return $this
     */
    public function setTxAsset($tx_asset)
    {
        $this->container['tx_asset'] = $tx_asset;

        return $this;
    }

    /**
     * Gets tx_fee
     *
     * @return string
     */
    public function getTxFee()
    {
        return $this->container['tx_fee'];
    }

    /**
     * Sets tx_fee
     *
     * @param string $tx_fee tx_fee
     *
     * @return $this
     */
    public function setTxFee($tx_fee)
    {
        $this->container['tx_fee'] = $tx_fee;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string $tx_hash tx_hash
     *
     * @return $this
     */
    public function setTxHash($tx_hash)
    {
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }

    /**
     * Gets tx_type
     *
     * @return string
     */
    public function getTxType()
    {
        return $this->container['tx_type'];
    }

    /**
     * Sets tx_type
     *
     * @param string $tx_type tx_type
     *
     * @return $this
     */
    public function setTxType($tx_type)
    {
        $this->container['tx_type'] = $tx_type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
