<?php
/**
 * Peer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Peer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Peer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Peer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'original_listen_addr' => 'string',
'listen_addr' => 'string',
'access_addr' => 'string',
'stream_addr' => 'string',
'network' => 'string',
'version' => 'string',
'moniker' => 'string',
'capabilities' => 'string[]',
'accelerated' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'original_listen_addr' => 'RemoteAddr',
'listen_addr' => 'RemoteAddr',
'access_addr' => 'RemoteAddr',
'stream_addr' => 'RemoteAddr',
'network' => null,
'version' => null,
'moniker' => null,
'capabilities' => null,
'accelerated' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'original_listen_addr' => 'original_listen_addr',
'listen_addr' => 'listen_addr',
'access_addr' => 'access_addr',
'stream_addr' => 'stream_addr',
'network' => 'network',
'version' => 'version',
'moniker' => 'moniker',
'capabilities' => 'capabilities',
'accelerated' => 'accelerated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'original_listen_addr' => 'setOriginalListenAddr',
'listen_addr' => 'setListenAddr',
'access_addr' => 'setAccessAddr',
'stream_addr' => 'setStreamAddr',
'network' => 'setNetwork',
'version' => 'setVersion',
'moniker' => 'setMoniker',
'capabilities' => 'setCapabilities',
'accelerated' => 'setAccelerated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'original_listen_addr' => 'getOriginalListenAddr',
'listen_addr' => 'getListenAddr',
'access_addr' => 'getAccessAddr',
'stream_addr' => 'getStreamAddr',
'network' => 'getNetwork',
'version' => 'getVersion',
'moniker' => 'getMoniker',
'capabilities' => 'getCapabilities',
'accelerated' => 'getAccelerated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CAPABILITIES_NODE = 'node';
const CAPABILITIES_QS = 'qs';
const CAPABILITIES_AP = 'ap';
const CAPABILITIES_WS = 'ws';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilitiesAllowableValues()
    {
        return [
            self::CAPABILITIES_NODE,
self::CAPABILITIES_QS,
self::CAPABILITIES_AP,
self::CAPABILITIES_WS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['original_listen_addr'] = isset($data['original_listen_addr']) ? $data['original_listen_addr'] : null;
        $this->container['listen_addr'] = isset($data['listen_addr']) ? $data['listen_addr'] : null;
        $this->container['access_addr'] = isset($data['access_addr']) ? $data['access_addr'] : null;
        $this->container['stream_addr'] = isset($data['stream_addr']) ? $data['stream_addr'] : null;
        $this->container['network'] = isset($data['network']) ? $data['network'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['moniker'] = isset($data['moniker']) ? $data['moniker'] : null;
        $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
        $this->container['accelerated'] = isset($data['accelerated']) ? $data['accelerated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['original_listen_addr'] === null) {
            $invalidProperties[] = "'original_listen_addr' can't be null";
        }
        if ($this->container['listen_addr'] === null) {
            $invalidProperties[] = "'listen_addr' can't be null";
        }
        if ($this->container['access_addr'] === null) {
            $invalidProperties[] = "'access_addr' can't be null";
        }
        if ($this->container['stream_addr'] === null) {
            $invalidProperties[] = "'stream_addr' can't be null";
        }
        if ($this->container['network'] === null) {
            $invalidProperties[] = "'network' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['moniker'] === null) {
            $invalidProperties[] = "'moniker' can't be null";
        }
        if ($this->container['capabilities'] === null) {
            $invalidProperties[] = "'capabilities' can't be null";
        }
        if ($this->container['accelerated'] === null) {
            $invalidProperties[] = "'accelerated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Authenticated identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets original_listen_addr
     *
     * @return string
     */
    public function getOriginalListenAddr()
    {
        return $this->container['original_listen_addr'];
    }

    /**
     * Sets original_listen_addr
     *
     * @param string $original_listen_addr Original listen address before PeersService changed it
     *
     * @return $this
     */
    public function setOriginalListenAddr($original_listen_addr)
    {
        $this->container['original_listen_addr'] = $original_listen_addr;

        return $this;
    }

    /**
     * Gets listen_addr
     *
     * @return string
     */
    public function getListenAddr()
    {
        return $this->container['listen_addr'];
    }

    /**
     * Sets listen_addr
     *
     * @param string $listen_addr Listen address
     *
     * @return $this
     */
    public function setListenAddr($listen_addr)
    {
        $this->container['listen_addr'] = $listen_addr;

        return $this;
    }

    /**
     * Gets access_addr
     *
     * @return string
     */
    public function getAccessAddr()
    {
        return $this->container['access_addr'];
    }

    /**
     * Sets access_addr
     *
     * @param string $access_addr Access address (HTTP)
     *
     * @return $this
     */
    public function setAccessAddr($access_addr)
    {
        $this->container['access_addr'] = $access_addr;

        return $this;
    }

    /**
     * Gets stream_addr
     *
     * @return string
     */
    public function getStreamAddr()
    {
        return $this->container['stream_addr'];
    }

    /**
     * Sets stream_addr
     *
     * @param string $stream_addr Stream address (WS)
     *
     * @return $this
     */
    public function setStreamAddr($stream_addr)
    {
        $this->container['stream_addr'] = $stream_addr;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string $network Chain ID
     *
     * @return $this
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version Version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets moniker
     *
     * @return string
     */
    public function getMoniker()
    {
        return $this->container['moniker'];
    }

    /**
     * Sets moniker
     *
     * @param string $moniker Moniker (Name)
     *
     * @return $this
     */
    public function setMoniker($moniker)
    {
        $this->container['moniker'] = $moniker;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return string[]
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param string[] $capabilities Array of capability tags: node, qs, ap, ws
     *
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $allowedValues = $this->getCapabilitiesAllowableValues();
        if (array_diff($capabilities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'capabilities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets accelerated
     *
     * @return bool
     */
    public function getAccelerated()
    {
        return $this->container['accelerated'];
    }

    /**
     * Sets accelerated
     *
     * @param bool $accelerated Is an accelerated path to a validator node
     *
     * @return $this
     */
    public function setAccelerated($accelerated)
    {
        $this->container['accelerated'] = $accelerated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
