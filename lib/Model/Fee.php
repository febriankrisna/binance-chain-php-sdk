<?php
/**
 * Fee
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Fee Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Fee implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Fee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'msg_type' => 'string',
'fee' => 'float',
'fee_for' => 'int',
'multi_transfer_fee' => 'string',
'lower_limit_as_multi' => 'string',
'fixed_fee_params' => 'AllOfFeeFixedFeeParams',
'dex_fee_fields' => 'AllOfFeeDexFeeFields'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'msg_type' => null,
'fee' => null,
'fee_for' => null,
'multi_transfer_fee' => null,
'lower_limit_as_multi' => null,
'fixed_fee_params' => null,
'dex_fee_fields' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'msg_type' => 'msg_type',
'fee' => 'fee',
'fee_for' => 'fee_for',
'multi_transfer_fee' => 'multi_transfer_fee',
'lower_limit_as_multi' => 'lower_limit_as_multi',
'fixed_fee_params' => 'fixed_fee_params',
'dex_fee_fields' => 'dex_fee_fields'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'msg_type' => 'setMsgType',
'fee' => 'setFee',
'fee_for' => 'setFeeFor',
'multi_transfer_fee' => 'setMultiTransferFee',
'lower_limit_as_multi' => 'setLowerLimitAsMulti',
'fixed_fee_params' => 'setFixedFeeParams',
'dex_fee_fields' => 'setDexFeeFields'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'msg_type' => 'getMsgType',
'fee' => 'getFee',
'fee_for' => 'getFeeFor',
'multi_transfer_fee' => 'getMultiTransferFee',
'lower_limit_as_multi' => 'getLowerLimitAsMulti',
'fixed_fee_params' => 'getFixedFeeParams',
'dex_fee_fields' => 'getDexFeeFields'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['msg_type'] = isset($data['msg_type']) ? $data['msg_type'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['fee_for'] = isset($data['fee_for']) ? $data['fee_for'] : null;
        $this->container['multi_transfer_fee'] = isset($data['multi_transfer_fee']) ? $data['multi_transfer_fee'] : null;
        $this->container['lower_limit_as_multi'] = isset($data['lower_limit_as_multi']) ? $data['lower_limit_as_multi'] : null;
        $this->container['fixed_fee_params'] = isset($data['fixed_fee_params']) ? $data['fixed_fee_params'] : null;
        $this->container['dex_fee_fields'] = isset($data['dex_fee_fields']) ? $data['dex_fee_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets msg_type
     *
     * @return string
     */
    public function getMsgType()
    {
        return $this->container['msg_type'];
    }

    /**
     * Sets msg_type
     *
     * @param string $msg_type Transaction msg type that this fee applies to
     *
     * @return $this
     */
    public function setMsgType($msg_type)
    {
        $this->container['msg_type'] = $msg_type;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float $fee The fee amount
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets fee_for
     *
     * @return int
     */
    public function getFeeFor()
    {
        return $this->container['fee_for'];
    }

    /**
     * Sets fee_for
     *
     * @param int $fee_for 1 = proposer, 2 = all, 3 = free
     *
     * @return $this
     */
    public function setFeeFor($fee_for)
    {
        $this->container['fee_for'] = $fee_for;

        return $this;
    }

    /**
     * Gets multi_transfer_fee
     *
     * @return string
     */
    public function getMultiTransferFee()
    {
        return $this->container['multi_transfer_fee'];
    }

    /**
     * Sets multi_transfer_fee
     *
     * @param string $multi_transfer_fee Fee for multi-transfer
     *
     * @return $this
     */
    public function setMultiTransferFee($multi_transfer_fee)
    {
        $this->container['multi_transfer_fee'] = $multi_transfer_fee;

        return $this;
    }

    /**
     * Gets lower_limit_as_multi
     *
     * @return string
     */
    public function getLowerLimitAsMulti()
    {
        return $this->container['lower_limit_as_multi'];
    }

    /**
     * Sets lower_limit_as_multi
     *
     * @param string $lower_limit_as_multi e.g. 2
     *
     * @return $this
     */
    public function setLowerLimitAsMulti($lower_limit_as_multi)
    {
        $this->container['lower_limit_as_multi'] = $lower_limit_as_multi;

        return $this;
    }

    /**
     * Gets fixed_fee_params
     *
     * @return AllOfFeeFixedFeeParams
     */
    public function getFixedFeeParams()
    {
        return $this->container['fixed_fee_params'];
    }

    /**
     * Sets fixed_fee_params
     *
     * @param AllOfFeeFixedFeeParams $fixed_fee_params Set if the fee is fixed
     *
     * @return $this
     */
    public function setFixedFeeParams($fixed_fee_params)
    {
        $this->container['fixed_fee_params'] = $fixed_fee_params;

        return $this;
    }

    /**
     * Gets dex_fee_fields
     *
     * @return AllOfFeeDexFeeFields
     */
    public function getDexFeeFields()
    {
        return $this->container['dex_fee_fields'];
    }

    /**
     * Sets dex_fee_fields
     *
     * @param AllOfFeeDexFeeFields $dex_fee_fields dex fee
     *
     * @return $this
     */
    public function setDexFeeFields($dex_fee_fields)
    {
        $this->container['dex_fee_fields'] = $dex_fee_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
