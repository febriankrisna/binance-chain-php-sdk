<?php
/**
 * TickerStatistics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TickerStatistics Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TickerStatistics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TickerStatistics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ask_price' => 'string',
'ask_quantity' => 'string',
'bid_price' => 'string',
'bid_quantity' => 'string',
'close_time' => 'int',
'count' => 'int',
'first_id' => 'string',
'high_price' => 'string',
'last_id' => 'string',
'last_price' => 'string',
'last_quantity' => 'string',
'low_price' => 'string',
'open_price' => 'string',
'open_time' => 'int',
'prev_close_price' => 'string',
'price_change' => 'string',
'price_change_percent' => 'string',
'quote_volume' => 'string',
'symbol' => 'string',
'volume' => 'string',
'weighted_avg_price' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ask_price' => null,
'ask_quantity' => null,
'bid_price' => null,
'bid_quantity' => null,
'close_time' => 'int64',
'count' => 'int64',
'first_id' => null,
'high_price' => null,
'last_id' => null,
'last_price' => null,
'last_quantity' => null,
'low_price' => null,
'open_price' => null,
'open_time' => 'int64',
'prev_close_price' => null,
'price_change' => null,
'price_change_percent' => null,
'quote_volume' => null,
'symbol' => null,
'volume' => null,
'weighted_avg_price' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ask_price' => 'askPrice',
'ask_quantity' => 'askQuantity',
'bid_price' => 'bidPrice',
'bid_quantity' => 'bidQuantity',
'close_time' => 'closeTime',
'count' => 'count',
'first_id' => 'firstId',
'high_price' => 'highPrice',
'last_id' => 'lastId',
'last_price' => 'lastPrice',
'last_quantity' => 'lastQuantity',
'low_price' => 'lowPrice',
'open_price' => 'openPrice',
'open_time' => 'openTime',
'prev_close_price' => 'prevClosePrice',
'price_change' => 'priceChange',
'price_change_percent' => 'priceChangePercent',
'quote_volume' => 'quoteVolume',
'symbol' => 'symbol',
'volume' => 'volume',
'weighted_avg_price' => 'weightedAvgPrice'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ask_price' => 'setAskPrice',
'ask_quantity' => 'setAskQuantity',
'bid_price' => 'setBidPrice',
'bid_quantity' => 'setBidQuantity',
'close_time' => 'setCloseTime',
'count' => 'setCount',
'first_id' => 'setFirstId',
'high_price' => 'setHighPrice',
'last_id' => 'setLastId',
'last_price' => 'setLastPrice',
'last_quantity' => 'setLastQuantity',
'low_price' => 'setLowPrice',
'open_price' => 'setOpenPrice',
'open_time' => 'setOpenTime',
'prev_close_price' => 'setPrevClosePrice',
'price_change' => 'setPriceChange',
'price_change_percent' => 'setPriceChangePercent',
'quote_volume' => 'setQuoteVolume',
'symbol' => 'setSymbol',
'volume' => 'setVolume',
'weighted_avg_price' => 'setWeightedAvgPrice'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ask_price' => 'getAskPrice',
'ask_quantity' => 'getAskQuantity',
'bid_price' => 'getBidPrice',
'bid_quantity' => 'getBidQuantity',
'close_time' => 'getCloseTime',
'count' => 'getCount',
'first_id' => 'getFirstId',
'high_price' => 'getHighPrice',
'last_id' => 'getLastId',
'last_price' => 'getLastPrice',
'last_quantity' => 'getLastQuantity',
'low_price' => 'getLowPrice',
'open_price' => 'getOpenPrice',
'open_time' => 'getOpenTime',
'prev_close_price' => 'getPrevClosePrice',
'price_change' => 'getPriceChange',
'price_change_percent' => 'getPriceChangePercent',
'quote_volume' => 'getQuoteVolume',
'symbol' => 'getSymbol',
'volume' => 'getVolume',
'weighted_avg_price' => 'getWeightedAvgPrice'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ask_price'] = isset($data['ask_price']) ? $data['ask_price'] : null;
        $this->container['ask_quantity'] = isset($data['ask_quantity']) ? $data['ask_quantity'] : null;
        $this->container['bid_price'] = isset($data['bid_price']) ? $data['bid_price'] : null;
        $this->container['bid_quantity'] = isset($data['bid_quantity']) ? $data['bid_quantity'] : null;
        $this->container['close_time'] = isset($data['close_time']) ? $data['close_time'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['first_id'] = isset($data['first_id']) ? $data['first_id'] : null;
        $this->container['high_price'] = isset($data['high_price']) ? $data['high_price'] : null;
        $this->container['last_id'] = isset($data['last_id']) ? $data['last_id'] : null;
        $this->container['last_price'] = isset($data['last_price']) ? $data['last_price'] : null;
        $this->container['last_quantity'] = isset($data['last_quantity']) ? $data['last_quantity'] : null;
        $this->container['low_price'] = isset($data['low_price']) ? $data['low_price'] : null;
        $this->container['open_price'] = isset($data['open_price']) ? $data['open_price'] : null;
        $this->container['open_time'] = isset($data['open_time']) ? $data['open_time'] : null;
        $this->container['prev_close_price'] = isset($data['prev_close_price']) ? $data['prev_close_price'] : null;
        $this->container['price_change'] = isset($data['price_change']) ? $data['price_change'] : null;
        $this->container['price_change_percent'] = isset($data['price_change_percent']) ? $data['price_change_percent'] : null;
        $this->container['quote_volume'] = isset($data['quote_volume']) ? $data['quote_volume'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['weighted_avg_price'] = isset($data['weighted_avg_price']) ? $data['weighted_avg_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ask_price
     *
     * @return string
     */
    public function getAskPrice()
    {
        return $this->container['ask_price'];
    }

    /**
     * Sets ask_price
     *
     * @param string $ask_price sell price
     *
     * @return $this
     */
    public function setAskPrice($ask_price)
    {
        $this->container['ask_price'] = $ask_price;

        return $this;
    }

    /**
     * Gets ask_quantity
     *
     * @return string
     */
    public function getAskQuantity()
    {
        return $this->container['ask_quantity'];
    }

    /**
     * Sets ask_quantity
     *
     * @param string $ask_quantity sell quantity
     *
     * @return $this
     */
    public function setAskQuantity($ask_quantity)
    {
        $this->container['ask_quantity'] = $ask_quantity;

        return $this;
    }

    /**
     * Gets bid_price
     *
     * @return string
     */
    public function getBidPrice()
    {
        return $this->container['bid_price'];
    }

    /**
     * Sets bid_price
     *
     * @param string $bid_price buy price
     *
     * @return $this
     */
    public function setBidPrice($bid_price)
    {
        $this->container['bid_price'] = $bid_price;

        return $this;
    }

    /**
     * Gets bid_quantity
     *
     * @return string
     */
    public function getBidQuantity()
    {
        return $this->container['bid_quantity'];
    }

    /**
     * Sets bid_quantity
     *
     * @param string $bid_quantity buy quantity
     *
     * @return $this
     */
    public function setBidQuantity($bid_quantity)
    {
        $this->container['bid_quantity'] = $bid_quantity;

        return $this;
    }

    /**
     * Gets close_time
     *
     * @return int
     */
    public function getCloseTime()
    {
        return $this->container['close_time'];
    }

    /**
     * Sets close_time
     *
     * @param int $close_time time of closing
     *
     * @return $this
     */
    public function setCloseTime($close_time)
    {
        $this->container['close_time'] = $close_time;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count total trade count
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets first_id
     *
     * @return string
     */
    public function getFirstId()
    {
        return $this->container['first_id'];
    }

    /**
     * Sets first_id
     *
     * @param string $first_id ID of first trade
     *
     * @return $this
     */
    public function setFirstId($first_id)
    {
        $this->container['first_id'] = $first_id;

        return $this;
    }

    /**
     * Gets high_price
     *
     * @return string
     */
    public function getHighPrice()
    {
        return $this->container['high_price'];
    }

    /**
     * Sets high_price
     *
     * @param string $high_price highest price
     *
     * @return $this
     */
    public function setHighPrice($high_price)
    {
        $this->container['high_price'] = $high_price;

        return $this;
    }

    /**
     * Gets last_id
     *
     * @return string
     */
    public function getLastId()
    {
        return $this->container['last_id'];
    }

    /**
     * Sets last_id
     *
     * @param string $last_id ID of last trade
     *
     * @return $this
     */
    public function setLastId($last_id)
    {
        $this->container['last_id'] = $last_id;

        return $this;
    }

    /**
     * Gets last_price
     *
     * @return string
     */
    public function getLastPrice()
    {
        return $this->container['last_price'];
    }

    /**
     * Sets last_price
     *
     * @param string $last_price last price
     *
     * @return $this
     */
    public function setLastPrice($last_price)
    {
        $this->container['last_price'] = $last_price;

        return $this;
    }

    /**
     * Gets last_quantity
     *
     * @return string
     */
    public function getLastQuantity()
    {
        return $this->container['last_quantity'];
    }

    /**
     * Sets last_quantity
     *
     * @param string $last_quantity last quantity
     *
     * @return $this
     */
    public function setLastQuantity($last_quantity)
    {
        $this->container['last_quantity'] = $last_quantity;

        return $this;
    }

    /**
     * Gets low_price
     *
     * @return string
     */
    public function getLowPrice()
    {
        return $this->container['low_price'];
    }

    /**
     * Sets low_price
     *
     * @param string $low_price lowest price
     *
     * @return $this
     */
    public function setLowPrice($low_price)
    {
        $this->container['low_price'] = $low_price;

        return $this;
    }

    /**
     * Gets open_price
     *
     * @return string
     */
    public function getOpenPrice()
    {
        return $this->container['open_price'];
    }

    /**
     * Sets open_price
     *
     * @param string $open_price open price
     *
     * @return $this
     */
    public function setOpenPrice($open_price)
    {
        $this->container['open_price'] = $open_price;

        return $this;
    }

    /**
     * Gets open_time
     *
     * @return int
     */
    public function getOpenTime()
    {
        return $this->container['open_time'];
    }

    /**
     * Sets open_time
     *
     * @param int $open_time open time
     *
     * @return $this
     */
    public function setOpenTime($open_time)
    {
        $this->container['open_time'] = $open_time;

        return $this;
    }

    /**
     * Gets prev_close_price
     *
     * @return string
     */
    public function getPrevClosePrice()
    {
        return $this->container['prev_close_price'];
    }

    /**
     * Sets prev_close_price
     *
     * @param string $prev_close_price last close price
     *
     * @return $this
     */
    public function setPrevClosePrice($prev_close_price)
    {
        $this->container['prev_close_price'] = $prev_close_price;

        return $this;
    }

    /**
     * Gets price_change
     *
     * @return string
     */
    public function getPriceChange()
    {
        return $this->container['price_change'];
    }

    /**
     * Sets price_change
     *
     * @param string $price_change change of price
     *
     * @return $this
     */
    public function setPriceChange($price_change)
    {
        $this->container['price_change'] = $price_change;

        return $this;
    }

    /**
     * Gets price_change_percent
     *
     * @return string
     */
    public function getPriceChangePercent()
    {
        return $this->container['price_change_percent'];
    }

    /**
     * Sets price_change_percent
     *
     * @param string $price_change_percent change of price in percentage
     *
     * @return $this
     */
    public function setPriceChangePercent($price_change_percent)
    {
        $this->container['price_change_percent'] = $price_change_percent;

        return $this;
    }

    /**
     * Gets quote_volume
     *
     * @return string
     */
    public function getQuoteVolume()
    {
        return $this->container['quote_volume'];
    }

    /**
     * Sets quote_volume
     *
     * @param string $quote_volume trading volume in quote asset
     *
     * @return $this
     */
    public function setQuoteVolume($quote_volume)
    {
        $this->container['quote_volume'] = $quote_volume;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol trading symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return string
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param string $volume trading volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets weighted_avg_price
     *
     * @return string
     */
    public function getWeightedAvgPrice()
    {
        return $this->container['weighted_avg_price'];
    }

    /**
     * Sets weighted_avg_price
     *
     * @param string $weighted_avg_price weighted average price
     *
     * @return $this
     */
    public function setWeightedAvgPrice($weighted_avg_price)
    {
        $this->container['weighted_avg_price'] = $weighted_avg_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
