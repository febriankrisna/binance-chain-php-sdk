<?php
/**
 * TxV2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TxV2 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TxV2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TxV2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'block_height' => 'int',
'code' => 'int',
'data' => 'string',
'from_addr' => 'string',
'memo' => 'string',
'order_id' => 'string',
'proposal_id' => 'string',
'sequence' => 'int',
'source' => 'int',
'sub_transactions' => '\Swagger\Client\Model\SubTx[]',
'swap_id' => 'string',
'time_stamp' => '\DateTime',
'to_addr' => 'string',
'tx_asset' => 'string',
'tx_fee' => 'string',
'tx_hash' => 'string',
'tx_type' => 'string',
'value' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'block_height' => 'int64',
'code' => 'int32',
'data' => null,
'from_addr' => null,
'memo' => null,
'order_id' => null,
'proposal_id' => null,
'sequence' => 'int64',
'source' => 'int64',
'sub_transactions' => null,
'swap_id' => null,
'time_stamp' => 'date-time',
'to_addr' => null,
'tx_asset' => null,
'tx_fee' => null,
'tx_hash' => null,
'tx_type' => null,
'value' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'block_height' => 'blockHeight',
'code' => 'code',
'data' => 'data',
'from_addr' => 'fromAddr',
'memo' => 'memo',
'order_id' => 'orderId',
'proposal_id' => 'proposalId',
'sequence' => 'sequence',
'source' => 'source',
'sub_transactions' => 'subTransactions',
'swap_id' => 'swapId',
'time_stamp' => 'timeStamp',
'to_addr' => 'toAddr',
'tx_asset' => 'txAsset',
'tx_fee' => 'txFee',
'tx_hash' => 'txHash',
'tx_type' => 'txType',
'value' => 'value'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'block_height' => 'setBlockHeight',
'code' => 'setCode',
'data' => 'setData',
'from_addr' => 'setFromAddr',
'memo' => 'setMemo',
'order_id' => 'setOrderId',
'proposal_id' => 'setProposalId',
'sequence' => 'setSequence',
'source' => 'setSource',
'sub_transactions' => 'setSubTransactions',
'swap_id' => 'setSwapId',
'time_stamp' => 'setTimeStamp',
'to_addr' => 'setToAddr',
'tx_asset' => 'setTxAsset',
'tx_fee' => 'setTxFee',
'tx_hash' => 'setTxHash',
'tx_type' => 'setTxType',
'value' => 'setValue'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'block_height' => 'getBlockHeight',
'code' => 'getCode',
'data' => 'getData',
'from_addr' => 'getFromAddr',
'memo' => 'getMemo',
'order_id' => 'getOrderId',
'proposal_id' => 'getProposalId',
'sequence' => 'getSequence',
'source' => 'getSource',
'sub_transactions' => 'getSubTransactions',
'swap_id' => 'getSwapId',
'time_stamp' => 'getTimeStamp',
'to_addr' => 'getToAddr',
'tx_asset' => 'getTxAsset',
'tx_fee' => 'getTxFee',
'tx_hash' => 'getTxHash',
'tx_type' => 'getTxType',
'value' => 'getValue'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['block_height'] = isset($data['block_height']) ? $data['block_height'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['from_addr'] = isset($data['from_addr']) ? $data['from_addr'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['proposal_id'] = isset($data['proposal_id']) ? $data['proposal_id'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['sub_transactions'] = isset($data['sub_transactions']) ? $data['sub_transactions'] : null;
        $this->container['swap_id'] = isset($data['swap_id']) ? $data['swap_id'] : null;
        $this->container['time_stamp'] = isset($data['time_stamp']) ? $data['time_stamp'] : null;
        $this->container['to_addr'] = isset($data['to_addr']) ? $data['to_addr'] : null;
        $this->container['tx_asset'] = isset($data['tx_asset']) ? $data['tx_asset'] : null;
        $this->container['tx_fee'] = isset($data['tx_fee']) ? $data['tx_fee'] : null;
        $this->container['tx_hash'] = isset($data['tx_hash']) ? $data['tx_hash'] : null;
        $this->container['tx_type'] = isset($data['tx_type']) ? $data['tx_type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['block_height'] === null) {
            $invalidProperties[] = "'block_height' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['data'] === null) {
            $invalidProperties[] = "'data' can't be null";
        }
        if ($this->container['from_addr'] === null) {
            $invalidProperties[] = "'from_addr' can't be null";
        }
        if ($this->container['memo'] === null) {
            $invalidProperties[] = "'memo' can't be null";
        }
        if ($this->container['sequence'] === null) {
            $invalidProperties[] = "'sequence' can't be null";
        }
        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['time_stamp'] === null) {
            $invalidProperties[] = "'time_stamp' can't be null";
        }
        if ($this->container['to_addr'] === null) {
            $invalidProperties[] = "'to_addr' can't be null";
        }
        if ($this->container['tx_asset'] === null) {
            $invalidProperties[] = "'tx_asset' can't be null";
        }
        if ($this->container['tx_fee'] === null) {
            $invalidProperties[] = "'tx_fee' can't be null";
        }
        if ($this->container['tx_hash'] === null) {
            $invalidProperties[] = "'tx_hash' can't be null";
        }
        if ($this->container['tx_type'] === null) {
            $invalidProperties[] = "'tx_type' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets block_height
     *
     * @return int
     */
    public function getBlockHeight()
    {
        return $this->container['block_height'];
    }

    /**
     * Sets block_height
     *
     * @param int $block_height block_height
     *
     * @return $this
     */
    public function setBlockHeight($block_height)
    {
        $this->container['block_height'] = $block_height;

        return $this;
    }

    /**
     * Gets code
     *
     * @return int
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param int $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets from_addr
     *
     * @return string
     */
    public function getFromAddr()
    {
        return $this->container['from_addr'];
    }

    /**
     * Sets from_addr
     *
     * @param string $from_addr from_addr
     *
     * @return $this
     */
    public function setFromAddr($from_addr)
    {
        $this->container['from_addr'] = $from_addr;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string $memo memo
     *
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Optional. Available when the transaction type is NEW_ORDER
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets proposal_id
     *
     * @return string
     */
    public function getProposalId()
    {
        return $this->container['proposal_id'];
    }

    /**
     * Sets proposal_id
     *
     * @param string $proposal_id Optional. Available when the transaction type is PROPOSAL
     *
     * @return $this
     */
    public function setProposalId($proposal_id)
    {
        $this->container['proposal_id'] = $proposal_id;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence sequence
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets source
     *
     * @return int
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param int $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets sub_transactions
     *
     * @return \Swagger\Client\Model\SubTx[]
     */
    public function getSubTransactions()
    {
        return $this->container['sub_transactions'];
    }

    /**
     * Sets sub_transactions
     *
     * @param \Swagger\Client\Model\SubTx[] $sub_transactions Optional. Available when the transaction has sub-transactions, such as multi-send transaction or a transaction have multiple assets
     *
     * @return $this
     */
    public function setSubTransactions($sub_transactions)
    {
        $this->container['sub_transactions'] = $sub_transactions;

        return $this;
    }

    /**
     * Gets swap_id
     *
     * @return string
     */
    public function getSwapId()
    {
        return $this->container['swap_id'];
    }

    /**
     * Sets swap_id
     *
     * @param string $swap_id Optional. Available when the transaction type is one of HTL_TRANSFER, CLAIM_HTL, REFUND_HTL, DEPOSIT_HTL
     *
     * @return $this
     */
    public function setSwapId($swap_id)
    {
        $this->container['swap_id'] = $swap_id;

        return $this;
    }

    /**
     * Gets time_stamp
     *
     * @return \DateTime
     */
    public function getTimeStamp()
    {
        return $this->container['time_stamp'];
    }

    /**
     * Sets time_stamp
     *
     * @param \DateTime $time_stamp time_stamp
     *
     * @return $this
     */
    public function setTimeStamp($time_stamp)
    {
        $this->container['time_stamp'] = $time_stamp;

        return $this;
    }

    /**
     * Gets to_addr
     *
     * @return string
     */
    public function getToAddr()
    {
        return $this->container['to_addr'];
    }

    /**
     * Sets to_addr
     *
     * @param string $to_addr to_addr
     *
     * @return $this
     */
    public function setToAddr($to_addr)
    {
        $this->container['to_addr'] = $to_addr;

        return $this;
    }

    /**
     * Gets tx_asset
     *
     * @return string
     */
    public function getTxAsset()
    {
        return $this->container['tx_asset'];
    }

    /**
     * Sets tx_asset
     *
     * @param string $tx_asset tx_asset
     *
     * @return $this
     */
    public function setTxAsset($tx_asset)
    {
        $this->container['tx_asset'] = $tx_asset;

        return $this;
    }

    /**
     * Gets tx_fee
     *
     * @return string
     */
    public function getTxFee()
    {
        return $this->container['tx_fee'];
    }

    /**
     * Sets tx_fee
     *
     * @param string $tx_fee tx_fee
     *
     * @return $this
     */
    public function setTxFee($tx_fee)
    {
        $this->container['tx_fee'] = $tx_fee;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string $tx_hash tx_hash
     *
     * @return $this
     */
    public function setTxHash($tx_hash)
    {
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }

    /**
     * Gets tx_type
     *
     * @return string
     */
    public function getTxType()
    {
        return $this->container['tx_type'];
    }

    /**
     * Sets tx_type
     *
     * @param string $tx_type tx_type
     *
     * @return $this
     */
    public function setTxType($tx_type)
    {
        $this->container['tx_type'] = $tx_type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
