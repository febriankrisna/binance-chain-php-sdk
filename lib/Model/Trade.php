<?php
/**
 * Trade
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Trade Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Trade implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Trade';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'base_asset' => 'string',
'block_height' => 'int',
'buy_fee' => 'string',
'buyer_id' => 'string',
'buyer_order_id' => 'string',
'buy_single_fee' => 'string',
'buyer_source' => 'int',
'price' => 'string',
'quantity' => 'string',
'quote_asset' => 'string',
'sell_fee' => 'string',
'seller_id' => 'string',
'seller_order_id' => 'string',
'sell_single_fee' => 'string',
'seller_source' => 'int',
'symbol' => 'string',
'tick_type' => 'string',
'time' => 'int',
'trade_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'base_asset' => null,
'block_height' => 'int64',
'buy_fee' => null,
'buyer_id' => null,
'buyer_order_id' => null,
'buy_single_fee' => null,
'buyer_source' => null,
'price' => null,
'quantity' => null,
'quote_asset' => null,
'sell_fee' => null,
'seller_id' => null,
'seller_order_id' => null,
'sell_single_fee' => null,
'seller_source' => null,
'symbol' => null,
'tick_type' => null,
'time' => 'int64',
'trade_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'base_asset' => 'baseAsset',
'block_height' => 'blockHeight',
'buy_fee' => 'buyFee',
'buyer_id' => 'buyerId',
'buyer_order_id' => 'buyerOrderId',
'buy_single_fee' => 'buySingleFee',
'buyer_source' => 'buyerSource',
'price' => 'price',
'quantity' => 'quantity',
'quote_asset' => 'quoteAsset',
'sell_fee' => 'sellFee',
'seller_id' => 'sellerId',
'seller_order_id' => 'sellerOrderId',
'sell_single_fee' => 'sellSingleFee',
'seller_source' => 'sellerSource',
'symbol' => 'symbol',
'tick_type' => 'tickType',
'time' => 'time',
'trade_id' => 'tradeId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'base_asset' => 'setBaseAsset',
'block_height' => 'setBlockHeight',
'buy_fee' => 'setBuyFee',
'buyer_id' => 'setBuyerId',
'buyer_order_id' => 'setBuyerOrderId',
'buy_single_fee' => 'setBuySingleFee',
'buyer_source' => 'setBuyerSource',
'price' => 'setPrice',
'quantity' => 'setQuantity',
'quote_asset' => 'setQuoteAsset',
'sell_fee' => 'setSellFee',
'seller_id' => 'setSellerId',
'seller_order_id' => 'setSellerOrderId',
'sell_single_fee' => 'setSellSingleFee',
'seller_source' => 'setSellerSource',
'symbol' => 'setSymbol',
'tick_type' => 'setTickType',
'time' => 'setTime',
'trade_id' => 'setTradeId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'base_asset' => 'getBaseAsset',
'block_height' => 'getBlockHeight',
'buy_fee' => 'getBuyFee',
'buyer_id' => 'getBuyerId',
'buyer_order_id' => 'getBuyerOrderId',
'buy_single_fee' => 'getBuySingleFee',
'buyer_source' => 'getBuyerSource',
'price' => 'getPrice',
'quantity' => 'getQuantity',
'quote_asset' => 'getQuoteAsset',
'sell_fee' => 'getSellFee',
'seller_id' => 'getSellerId',
'seller_order_id' => 'getSellerOrderId',
'sell_single_fee' => 'getSellSingleFee',
'seller_source' => 'getSellerSource',
'symbol' => 'getSymbol',
'tick_type' => 'getTickType',
'time' => 'getTime',
'trade_id' => 'getTradeId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['base_asset'] = isset($data['base_asset']) ? $data['base_asset'] : null;
        $this->container['block_height'] = isset($data['block_height']) ? $data['block_height'] : null;
        $this->container['buy_fee'] = isset($data['buy_fee']) ? $data['buy_fee'] : null;
        $this->container['buyer_id'] = isset($data['buyer_id']) ? $data['buyer_id'] : null;
        $this->container['buyer_order_id'] = isset($data['buyer_order_id']) ? $data['buyer_order_id'] : null;
        $this->container['buy_single_fee'] = isset($data['buy_single_fee']) ? $data['buy_single_fee'] : null;
        $this->container['buyer_source'] = isset($data['buyer_source']) ? $data['buyer_source'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quote_asset'] = isset($data['quote_asset']) ? $data['quote_asset'] : null;
        $this->container['sell_fee'] = isset($data['sell_fee']) ? $data['sell_fee'] : null;
        $this->container['seller_id'] = isset($data['seller_id']) ? $data['seller_id'] : null;
        $this->container['seller_order_id'] = isset($data['seller_order_id']) ? $data['seller_order_id'] : null;
        $this->container['sell_single_fee'] = isset($data['sell_single_fee']) ? $data['sell_single_fee'] : null;
        $this->container['seller_source'] = isset($data['seller_source']) ? $data['seller_source'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['tick_type'] = isset($data['tick_type']) ? $data['tick_type'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['trade_id'] = isset($data['trade_id']) ? $data['trade_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets base_asset
     *
     * @return string
     */
    public function getBaseAsset()
    {
        return $this->container['base_asset'];
    }

    /**
     * Sets base_asset
     *
     * @param string $base_asset base asset symbol
     *
     * @return $this
     */
    public function setBaseAsset($base_asset)
    {
        $this->container['base_asset'] = $base_asset;

        return $this;
    }

    /**
     * Gets block_height
     *
     * @return int
     */
    public function getBlockHeight()
    {
        return $this->container['block_height'];
    }

    /**
     * Sets block_height
     *
     * @param int $block_height block height
     *
     * @return $this
     */
    public function setBlockHeight($block_height)
    {
        $this->container['block_height'] = $block_height;

        return $this;
    }

    /**
     * Gets buy_fee
     *
     * @return string
     */
    public function getBuyFee()
    {
        return $this->container['buy_fee'];
    }

    /**
     * Sets buy_fee
     *
     * @param string $buy_fee trading fee for the buyer address on the block of this trade
     *
     * @return $this
     */
    public function setBuyFee($buy_fee)
    {
        $this->container['buy_fee'] = $buy_fee;

        return $this;
    }

    /**
     * Gets buyer_id
     *
     * @return string
     */
    public function getBuyerId()
    {
        return $this->container['buyer_id'];
    }

    /**
     * Sets buyer_id
     *
     * @param string $buyer_id id of buyer
     *
     * @return $this
     */
    public function setBuyerId($buyer_id)
    {
        $this->container['buyer_id'] = $buyer_id;

        return $this;
    }

    /**
     * Gets buyer_order_id
     *
     * @return string
     */
    public function getBuyerOrderId()
    {
        return $this->container['buyer_order_id'];
    }

    /**
     * Sets buyer_order_id
     *
     * @param string $buyer_order_id order id for buyer
     *
     * @return $this
     */
    public function setBuyerOrderId($buyer_order_id)
    {
        $this->container['buyer_order_id'] = $buyer_order_id;

        return $this;
    }

    /**
     * Gets buy_single_fee
     *
     * @return string
     */
    public function getBuySingleFee()
    {
        return $this->container['buy_single_fee'];
    }

    /**
     * Sets buy_single_fee
     *
     * @param string $buy_single_fee trading fee for the buyer address on this single trade
     *
     * @return $this
     */
    public function setBuySingleFee($buy_single_fee)
    {
        $this->container['buy_single_fee'] = $buy_single_fee;

        return $this;
    }

    /**
     * Gets buyer_source
     *
     * @return int
     */
    public function getBuyerSource()
    {
        return $this->container['buyer_source'];
    }

    /**
     * Sets buyer_source
     *
     * @param int $buyer_source tx source of buy order
     *
     * @return $this
     */
    public function setBuyerSource($buyer_source)
    {
        $this->container['buyer_source'] = $buyer_source;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price trade price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity trade quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quote_asset
     *
     * @return string
     */
    public function getQuoteAsset()
    {
        return $this->container['quote_asset'];
    }

    /**
     * Sets quote_asset
     *
     * @param string $quote_asset quote asset symbol
     *
     * @return $this
     */
    public function setQuoteAsset($quote_asset)
    {
        $this->container['quote_asset'] = $quote_asset;

        return $this;
    }

    /**
     * Gets sell_fee
     *
     * @return string
     */
    public function getSellFee()
    {
        return $this->container['sell_fee'];
    }

    /**
     * Sets sell_fee
     *
     * @param string $sell_fee trading fee for the seller address on the block of this trade
     *
     * @return $this
     */
    public function setSellFee($sell_fee)
    {
        $this->container['sell_fee'] = $sell_fee;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return string
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param string $seller_id seller ID
     *
     * @return $this
     */
    public function setSellerId($seller_id)
    {
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets seller_order_id
     *
     * @return string
     */
    public function getSellerOrderId()
    {
        return $this->container['seller_order_id'];
    }

    /**
     * Sets seller_order_id
     *
     * @param string $seller_order_id seller order ID
     *
     * @return $this
     */
    public function setSellerOrderId($seller_order_id)
    {
        $this->container['seller_order_id'] = $seller_order_id;

        return $this;
    }

    /**
     * Gets sell_single_fee
     *
     * @return string
     */
    public function getSellSingleFee()
    {
        return $this->container['sell_single_fee'];
    }

    /**
     * Sets sell_single_fee
     *
     * @param string $sell_single_fee trading fee for the seller address on this single trade
     *
     * @return $this
     */
    public function setSellSingleFee($sell_single_fee)
    {
        $this->container['sell_single_fee'] = $sell_single_fee;

        return $this;
    }

    /**
     * Gets seller_source
     *
     * @return int
     */
    public function getSellerSource()
    {
        return $this->container['seller_source'];
    }

    /**
     * Sets seller_source
     *
     * @param int $seller_source tx source of sell order
     *
     * @return $this
     */
    public function setSellerSource($seller_source)
    {
        $this->container['seller_source'] = $seller_source;

        return $this;
    }

    /**
     * Gets symbol
     *
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     *
     * @param string $symbol asset symbol
     *
     * @return $this
     */
    public function setSymbol($symbol)
    {
        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets tick_type
     *
     * @return string
     */
    public function getTickType()
    {
        return $this->container['tick_type'];
    }

    /**
     * Sets tick_type
     *
     * @param string $tick_type enum [Unknown,SellTaker,BuyTaker,BuySurplus,SellSurplus,Neutral]
     *
     * @return $this
     */
    public function setTickType($tick_type)
    {
        $this->container['tick_type'] = $tick_type;

        return $this;
    }

    /**
     * Gets time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time trade time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets trade_id
     *
     * @return string
     */
    public function getTradeId()
    {
        return $this->container['trade_id'];
    }

    /**
     * Sets trade_id
     *
     * @param string $trade_id trade ID
     *
     * @return $this
     */
    public function setTradeId($trade_id)
    {
        $this->container['trade_id'] = $trade_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
