<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hash' => 'string',
'log' => 'string',
'data' => 'string',
'height' => 'string',
'code' => 'int',
'ok' => 'bool',
'tx' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hash' => 'hex',
'log' => null,
'data' => null,
'height' => null,
'code' => 'int32',
'ok' => null,
'tx' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hash' => 'hash',
'log' => 'log',
'data' => 'data',
'height' => 'height',
'code' => 'code',
'ok' => 'ok',
'tx' => 'tx'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hash' => 'setHash',
'log' => 'setLog',
'data' => 'setData',
'height' => 'setHeight',
'code' => 'setCode',
'ok' => 'setOk',
'tx' => 'setTx'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hash' => 'getHash',
'log' => 'getLog',
'data' => 'getData',
'height' => 'getHeight',
'code' => 'getCode',
'ok' => 'getOk',
'tx' => 'getTx'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['log'] = isset($data['log']) ? $data['log'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : 0;
        $this->container['ok'] = isset($data['ok']) ? $data['ok'] : null;
        $this->container['tx'] = isset($data['tx']) ? $data['tx'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash Hash of transaction, it returned as bytes before, and now it returns as hex string
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets log
     *
     * @return string
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param string $log Log of transaction
     *
     * @return $this
     */
    public function setLog($log)
    {
        $this->container['log'] = $log;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data Data of transaction
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height Height of transaction
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets code
     *
     * @return int
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param int $code Result code of transaction
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets ok
     *
     * @return bool
     */
    public function getOk()
    {
        return $this->container['ok'];
    }

    /**
     * Sets ok
     *
     * @param bool $ok ok
     *
     * @return $this
     */
    public function setOk($ok)
    {
        $this->container['ok'] = $ok;

        return $this;
    }

    /**
     * Gets tx
     *
     * @return object
     */
    public function getTx()
    {
        return $this->container['tx'];
    }

    /**
     * Sets tx
     *
     * @param object $tx Detail of transaction, like transaction type, messages and signature  For example, below is the detail of a send transaction. Most of the fields are fixed, but the detail of msg varies with msg type, if you query with --format=json.  ``` {     \"type\": \"auth/StdTx\", // fixed, type of transaction     \"value\": {            // fixed, detail of the transaction         \"data\": null,     // fixed, data of the transaction         \"memo\": \"\",       // fixed, memo         \"msg\": [          // fixed, msgs of the transaction             {                 \"type\": \"cosmos-sdk/Send\",  // vary with msg type                 \"value\": {                  // value content vary with mst type                     \"inputs\": [                         {                             \"address\": \"bnb1vt4zwu5hy7tyryktud6mpcu8h2ehh6xw66gzwp\",                             \"coins\": [                                 {                                     \"amount\": \"100000000000000\",                                     \"denom\": \"BNB\"                                 }                             ]                         }                     ],                     \"outputs\": [                         {                             \"address\": \"bnb1kg8mh20tndur9d9rry4wjunhpfzcud30qzf0qv\",                             \"coins\": [                                 {                                     \"amount\": \"100000000000000\",                                     \"denom\": \"BNB\"                                 }                             ]                         }                     ]                 }             }         ],         \"signatures\": [ // fixed, signatures of the transaction             {                 \"account_number\": \"0\",                 \"pub_key\": {                     \"type\": \"tendermint/PubKeySecp256k1\",                     \"value\": \"AoWY3eWBOnnvLPTz4RsUlX1pWCkLLPewu1vAAoTEzxzR\"                 },                 \"sequence\": \"1\",                 \"signature\": \"6O2TQAgleFNPw4zIWBLaNvOf5dR7DHNSr2DwAPeFK6lokRqZd2KR2BD+WlmaWj4LdLo5N+utN1JtY41E91N0uw==\"             }         ],         \"source\": \"0\"  // fixed, source of the transaction     } } ```
     *
     * @return $this
     */
    public function setTx($tx)
    {
        $this->container['tx'] = $tx;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
