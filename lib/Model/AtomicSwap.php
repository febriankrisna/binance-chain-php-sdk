<?php
/**
 * AtomicSwap
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HTTP API
 *
 * The Binance Chain HTTP API provides access to a Binance Chain node deployment and market data services.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AtomicSwap Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AtomicSwap implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AtomicSwap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'block_timestamp' => 'int',
'closed_time' => 'int',
'cross_chain' => 'int',
'expected_income' => 'string',
'expire_height' => 'int',
'from_addr' => 'string',
'in_amount' => 'string',
'out_amount' => 'string',
'random_number' => 'string',
'random_number_hash' => 'string',
'recipient_other_chain' => 'string',
'status' => 'int',
'swap_id' => 'string',
'timestamp' => 'string',
'to_addr' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'block_timestamp' => 'int64',
'closed_time' => 'int64',
'cross_chain' => 'int32',
'expected_income' => null,
'expire_height' => 'int64',
'from_addr' => null,
'in_amount' => null,
'out_amount' => null,
'random_number' => null,
'random_number_hash' => null,
'recipient_other_chain' => null,
'status' => 'int32',
'swap_id' => null,
'timestamp' => 'int64',
'to_addr' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'block_timestamp' => 'blockTimestamp',
'closed_time' => 'closedTime',
'cross_chain' => 'crossChain',
'expected_income' => 'expectedIncome',
'expire_height' => 'expireHeight',
'from_addr' => 'fromAddr',
'in_amount' => 'inAmount',
'out_amount' => 'outAmount',
'random_number' => 'randomNumber',
'random_number_hash' => 'randomNumberHash',
'recipient_other_chain' => 'recipientOtherChain',
'status' => 'status',
'swap_id' => 'swapId',
'timestamp' => 'timestamp',
'to_addr' => 'toAddr'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'block_timestamp' => 'setBlockTimestamp',
'closed_time' => 'setClosedTime',
'cross_chain' => 'setCrossChain',
'expected_income' => 'setExpectedIncome',
'expire_height' => 'setExpireHeight',
'from_addr' => 'setFromAddr',
'in_amount' => 'setInAmount',
'out_amount' => 'setOutAmount',
'random_number' => 'setRandomNumber',
'random_number_hash' => 'setRandomNumberHash',
'recipient_other_chain' => 'setRecipientOtherChain',
'status' => 'setStatus',
'swap_id' => 'setSwapId',
'timestamp' => 'setTimestamp',
'to_addr' => 'setToAddr'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'block_timestamp' => 'getBlockTimestamp',
'closed_time' => 'getClosedTime',
'cross_chain' => 'getCrossChain',
'expected_income' => 'getExpectedIncome',
'expire_height' => 'getExpireHeight',
'from_addr' => 'getFromAddr',
'in_amount' => 'getInAmount',
'out_amount' => 'getOutAmount',
'random_number' => 'getRandomNumber',
'random_number_hash' => 'getRandomNumberHash',
'recipient_other_chain' => 'getRecipientOtherChain',
'status' => 'getStatus',
'swap_id' => 'getSwapId',
'timestamp' => 'getTimestamp',
'to_addr' => 'getToAddr'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['block_timestamp'] = isset($data['block_timestamp']) ? $data['block_timestamp'] : null;
        $this->container['closed_time'] = isset($data['closed_time']) ? $data['closed_time'] : null;
        $this->container['cross_chain'] = isset($data['cross_chain']) ? $data['cross_chain'] : null;
        $this->container['expected_income'] = isset($data['expected_income']) ? $data['expected_income'] : null;
        $this->container['expire_height'] = isset($data['expire_height']) ? $data['expire_height'] : null;
        $this->container['from_addr'] = isset($data['from_addr']) ? $data['from_addr'] : null;
        $this->container['in_amount'] = isset($data['in_amount']) ? $data['in_amount'] : null;
        $this->container['out_amount'] = isset($data['out_amount']) ? $data['out_amount'] : null;
        $this->container['random_number'] = isset($data['random_number']) ? $data['random_number'] : null;
        $this->container['random_number_hash'] = isset($data['random_number_hash']) ? $data['random_number_hash'] : null;
        $this->container['recipient_other_chain'] = isset($data['recipient_other_chain']) ? $data['recipient_other_chain'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['swap_id'] = isset($data['swap_id']) ? $data['swap_id'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['to_addr'] = isset($data['to_addr']) ? $data['to_addr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets block_timestamp
     *
     * @return int
     */
    public function getBlockTimestamp()
    {
        return $this->container['block_timestamp'];
    }

    /**
     * Sets block_timestamp
     *
     * @param int $block_timestamp Timestamp of block in which the swap is initiated. The unit is millisecond.
     *
     * @return $this
     */
    public function setBlockTimestamp($block_timestamp)
    {
        $this->container['block_timestamp'] = $block_timestamp;

        return $this;
    }

    /**
     * Gets closed_time
     *
     * @return int
     */
    public function getClosedTime()
    {
        return $this->container['closed_time'];
    }

    /**
     * Sets closed_time
     *
     * @param int $closed_time closed_time
     *
     * @return $this
     */
    public function setClosedTime($closed_time)
    {
        $this->container['closed_time'] = $closed_time;

        return $this;
    }

    /**
     * Gets cross_chain
     *
     * @return int
     */
    public function getCrossChain()
    {
        return $this->container['cross_chain'];
    }

    /**
     * Sets cross_chain
     *
     * @param int $cross_chain cross_chain
     *
     * @return $this
     */
    public function setCrossChain($cross_chain)
    {
        $this->container['cross_chain'] = $cross_chain;

        return $this;
    }

    /**
     * Gets expected_income
     *
     * @return string
     */
    public function getExpectedIncome()
    {
        return $this->container['expected_income'];
    }

    /**
     * Sets expected_income
     *
     * @param string $expected_income expected_income
     *
     * @return $this
     */
    public function setExpectedIncome($expected_income)
    {
        $this->container['expected_income'] = $expected_income;

        return $this;
    }

    /**
     * Gets expire_height
     *
     * @return int
     */
    public function getExpireHeight()
    {
        return $this->container['expire_height'];
    }

    /**
     * Sets expire_height
     *
     * @param int $expire_height expire_height
     *
     * @return $this
     */
    public function setExpireHeight($expire_height)
    {
        $this->container['expire_height'] = $expire_height;

        return $this;
    }

    /**
     * Gets from_addr
     *
     * @return string
     */
    public function getFromAddr()
    {
        return $this->container['from_addr'];
    }

    /**
     * Sets from_addr
     *
     * @param string $from_addr from_addr
     *
     * @return $this
     */
    public function setFromAddr($from_addr)
    {
        $this->container['from_addr'] = $from_addr;

        return $this;
    }

    /**
     * Gets in_amount
     *
     * @return string
     */
    public function getInAmount()
    {
        return $this->container['in_amount'];
    }

    /**
     * Sets in_amount
     *
     * @param string $in_amount in_amount
     *
     * @return $this
     */
    public function setInAmount($in_amount)
    {
        $this->container['in_amount'] = $in_amount;

        return $this;
    }

    /**
     * Gets out_amount
     *
     * @return string
     */
    public function getOutAmount()
    {
        return $this->container['out_amount'];
    }

    /**
     * Sets out_amount
     *
     * @param string $out_amount out_amount
     *
     * @return $this
     */
    public function setOutAmount($out_amount)
    {
        $this->container['out_amount'] = $out_amount;

        return $this;
    }

    /**
     * Gets random_number
     *
     * @return string
     */
    public function getRandomNumber()
    {
        return $this->container['random_number'];
    }

    /**
     * Sets random_number
     *
     * @param string $random_number random_number
     *
     * @return $this
     */
    public function setRandomNumber($random_number)
    {
        $this->container['random_number'] = $random_number;

        return $this;
    }

    /**
     * Gets random_number_hash
     *
     * @return string
     */
    public function getRandomNumberHash()
    {
        return $this->container['random_number_hash'];
    }

    /**
     * Sets random_number_hash
     *
     * @param string $random_number_hash random_number_hash
     *
     * @return $this
     */
    public function setRandomNumberHash($random_number_hash)
    {
        $this->container['random_number_hash'] = $random_number_hash;

        return $this;
    }

    /**
     * Gets recipient_other_chain
     *
     * @return string
     */
    public function getRecipientOtherChain()
    {
        return $this->container['recipient_other_chain'];
    }

    /**
     * Sets recipient_other_chain
     *
     * @param string $recipient_other_chain recipient_other_chain
     *
     * @return $this
     */
    public function setRecipientOtherChain($recipient_other_chain)
    {
        $this->container['recipient_other_chain'] = $recipient_other_chain;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets swap_id
     *
     * @return string
     */
    public function getSwapId()
    {
        return $this->container['swap_id'];
    }

    /**
     * Sets swap_id
     *
     * @param string $swap_id swap_id
     *
     * @return $this
     */
    public function setSwapId($swap_id)
    {
        $this->container['swap_id'] = $swap_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return string
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param string $timestamp The timestamp for randomNumberHash calculation, randomNumberHash=sha256(randomNumber, timestamp). The unit is second.
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets to_addr
     *
     * @return string
     */
    public function getToAddr()
    {
        return $this->container['to_addr'];
    }

    /**
     * Sets to_addr
     *
     * @param string $to_addr to_addr
     *
     * @return $this
     */
    public function setToAddr($to_addr)
    {
        $this->container['to_addr'] = $to_addr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
